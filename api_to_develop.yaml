swagger: '2.0'
info:
  # we are using javascript, non-typed language
  description: This is a simple API
  version: 1.0.0
  title: Simple Inventory API
  # put the contact info for your development or API team
  contact:
    email: you@your-company.com

  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

# tags are used for organizing operations
tags:
- name: admins
  description: Secured Admin-only calls
- name: developers
  description: Operations available to regular developers

paths:
  /orders/{id}:
    get:
      summary: get specific order
      description: "Get an order based on a customer ID"
      operationId: 
      parameters:
        - name: id
          in: path
          description: order ID
          required: true
          type: integer
          format: int64 
      responses:
        200:
          description: OK
    put:
      summary: modify existing order
      description: 
      parameters:
        # TODO: add parameter for order field to edit
        - name: id
          in: path
          description: order ID
          required: true
          type: integer
          format: int64 
      responses:
        200:
          description: OK
          
    delete:
      summary: delete draft order (not allowed for active orders)
      description: 
      parameters:
        - name: id
          in: path
          description: order ID
          required: true
          type: integer
          format: int64 
      responses:
        200:
          description: OK
    
    
    
  /orders:
    get:
      summary: get all orders
      description: "get all orders"
      responses:
        200:
          description: OK
    
    post:
      summary: create new order
      description: "Create new order draft, is not an 'active' order yet"
      parameters:
      - name: id
          in: path
          description: order ID
          required: true
          type: integer
          format: int64 
      responses:
        200:
          description: OK
    
    
  
  /customers/{id}:
    get:
      summary: 
      description: 
      responses:
        200:
          description: OK
    put:
      summary: 
      description: 
      responses:
        200:
          description: OK
    
    delete:
      summary: 
      description: 
      responses:
        200:
          description: OK
    
  /customers:
    get:
      tags:
      - developers
      summary: searches for customer ID
      operationId: searchInventory
      description: |
        By passing in the appropriate options, you can search for
        available inventory in the system
      produces:
      - application/json
      parameters:
      - in: query
        name: searchString
        description: pass an optional search string for looking up inventory
        required: false
        type: string
      - in: query
        name: skip
        description: number of records to skip for pagination
        type: integer
        format: int32
        minimum: 0
      - in: query
        name: limit
        description: maximum number of records to return
        type: integer
        format: int32
        minimum: 0
        maximum: 50
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/InventoryItem'
        400:
          description: bad input parameter
    post:
      tags:
      - admins
      summary: adds an inventory item
      operationId: addInventory
      description: Adds an item to the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: inventoryItem
        description: Inventory item to add
        schema:
          $ref: '#/definitions/InventoryItem'
      responses:
        201:
          description: item created
        400:
          description: invalid input, object invalid
        409:
          description: an existing item already exists

/products: 
    get: 
      summary: get all products
      description: "Get all products from database"
      operationId: getAllProducts
      responses: 
        200: 
          description: OK
        500: 
          description: 'server error'
  /products/{id}:
    get: 
      summary: get specific product 
      description: "Get a specific product by the ID"
      operationID: getSpecificProduct
      parameters: 
        - name: id
          in: path
          description: order ID
          required: true
          type: integer
          format: int64 
      responses: 
        200:
          decription: OK
        500:
          description: 'server error'
    put: 
      summary: update specific product 
      description: "increment/decrement quantity given its id" 
      operationsId: updateSpecificProduct
      parameters: 
        - name: id
          in: path
          description: order ID
          required: true
          type: integer
          format: int64 
        - name: incrementOrDecrement
          description: 'true to increment, false to decrement'
          format: boolean 
          required: true
      responses: 
        200:
          decription: OK
        500: 
          description: 'server error'

          
definitions:
  InventoryItem:
    type: object
    required:
    - id
    - name
    - manufacturer
    - releaseDate
    properties:
      id:
        type: string
        format: uuid
        example: d290f1ee-6c54-4b01-90e6-d701748f0851
      name:
        type: string
        example: Widget Adapter
      releaseDate:
        type: string
        format: date-time
        example: 2016-08-29T09:12:33.001Z
      manufacturer:
        $ref: '#/definitions/Manufacturer'
  Manufacturer:
    required:
    - name
    properties:
      name:
        type: string
        example: ACME Corporation
      homePage:
        type: string
        format: url
        example:  https://www.acme-corp.com
      phone:
        type: string
        example: 408-867-5309
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /TJXnoah/noahtest/1.0.0
schemes:
 - https